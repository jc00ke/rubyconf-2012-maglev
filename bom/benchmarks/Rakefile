require 'benchmark'

module BenchmarkSettings
  module_function

  def number_to_create
    5_000
  end

  def commit_slice
    2_500
  end
end

namespace :bench do
  desc "Benchmark Sequel model"
  task :sequel do
    raise "Run in MRI please" unless RUBY_ENGINE == "ruby"

    require_relative '../relational/db/connection'
    require_relative '../relational/lib/models'
    DB.tables.each do |table|
      DB[table].delete
    end

    Benchmark.bm do |x|

      x.report('Sequel transaction') do
        DB.transaction do
          BenchmarkSettings.number_to_create.times do |i|
            Part.create(:name => "Foo #{i}")
          end
        end
      end

      x.report('Sequel individual inserts') do
        BenchmarkSettings.number_to_create.times do |i|
          Part.create(:name => "Foo #{i}")
        end
      end

      x.report("Sequel import every #{BenchmarkSettings.commit_slice}") do
        parts = []
        BenchmarkSettings.number_to_create.times do |i|
          parts << ["Foo #{i}"]
        end
        DB[:parts].import([:name], parts, :commit_every => BenchmarkSettings.commit_slice)
      end
    end
  end

  desc "Benchmark MagLev"
  task :maglev do
    raise "Run in MagLev please" unless defined?(Maglev)

    PROOT = Maglev::PERSISTENT_ROOT
    PROOT[:parts] = []

    Maglev.persistent do
      require "../maglev/part.rb" unless defined?(Part)
    end

    Maglev.commit_transaction

    Benchmark.bm do |x|
      x.report('MagLev transaction') do
        BenchmarkSettings.number_to_create.times do |i|
          PROOT[:parts] << Part.new(:name => "Foo #{i}", :cost => 10)
        end
        Maglev.commit_transaction
      end
    end
  end
end
